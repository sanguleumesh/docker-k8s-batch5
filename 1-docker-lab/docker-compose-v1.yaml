version: "3.8"

services:
  db:
    image: postgres:15
    container_name: postgres_db
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST_AUTH_METHOD: trust
    networks:
      - app-network
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:alpine
    container_name: redis_cache
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      retries: 5
    restart: unless-stopped

  worker:
    image: docker/example-voting-app-worker
    container_name: voting_worker
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  vote:
    image: docker/example-voting-app-vote
    container_name: voting_app
    ports:
      - 5000:80
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  result:
    image: docker/example-voting-app-result
    container_name: result_app
    ports:
      - 5001:80
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

volumes:
  db-data:

networks:
  app-network:
    driver: bridge  # Explicitly using bridge network
